export { pipe, flow, identity, absurd } from 'fp-ts/lib/function';
export declare type FE<R> = () => R;
export declare type II = <R>(fe: FE<R>) => R;
export declare const ii: II;
export declare type Nullable<T> = T | null;
declare type NonNullableExport<T> = NonNullable<T>;
export { NonNullableExport as NonNullable };
declare type unknownExport = unknown;
export { unknownExport as unknown };
declare type nullExport = null;
export { nullExport as null };
declare type stringExport = string;
export { stringExport as string };
export * as string_ from 'fp-ts/lib/string';
declare type undefinedExport = undefined;
export { undefinedExport as undefined };
declare type voidExport = void;
export { voidExport as void };
export * as void_ from 'fp-ts/void';
export * as function_ from 'fp-ts/lib/function';
export { Lazy } from 'fp-ts/lib/function';
export { Predicate } from 'fp-ts/lib/Predicate';
export * as Predicate_ from 'fp-ts/lib/Predicate';
declare type booleanExport = boolean;
export { booleanExport as boolean };
export * as boolean_ from 'fp-ts/lib/boolean';
declare type numberExport = number;
export { numberExport as number };
export * as number_ from 'fp-ts/lib/number';
declare type ArrayExport<T> = Array<T>;
export { ArrayExport as Array };
export * as Array_ from 'fp-ts/lib/Array';
export declare const array: <A>(...a: Array<A>) => Array<A>;
declare type SetExport<T> = Set<T>;
export { SetExport as Set };
export * as Set_ from 'fp-ts/lib/Set';
export declare const set: <A>(...a: Array<A>) => Set<A>;
declare type TupleType<T extends Array<any>> = T;
export declare type Tuple<T extends Array<any>> = TupleType<T>;
export * as Tuple_ from 'fp-ts/lib/Tuple';
export declare const tuple: <T extends Array<any>>(...t: T) => T;
declare type RecordExport<K extends string | number | symbol, T> = Record<K, T>;
export { RecordExport as Record };
export * as Record_ from 'fp-ts/lib/Record';
export * as struct_ from 'fp-ts/lib/struct';
import type { NonEmptyArray as NonEmptyArrayType } from 'fp-ts/lib/NonEmptyArray';
export declare type NonEmptyArray<A> = NonEmptyArrayType<A>;
export * as NonEmptyArray_ from 'fp-ts/lib/NonEmptyArray';
export { Identity } from 'fp-ts/lib/Identity';
export * as Identity_ from 'fp-ts/lib/Identity';
import type { Option as OptionType } from 'fp-ts/lib/Option';
export declare type Option<A> = OptionType<A>;
export * as Option_ from 'fp-ts/lib/Option';
export { None } from 'fp-ts/lib/Option';
export { none } from 'fp-ts/lib/Option';
export { Some } from 'fp-ts/lib/Option';
export { some } from 'fp-ts/lib/Option';
import type { Either as EitherType } from 'fp-ts/lib/Either';
export declare type Either<E, A> = EitherType<E, A>;
export * as Either_ from 'fp-ts/lib/Either';
export { Left } from 'fp-ts/lib/Either';
export { left } from 'fp-ts/lib/Either';
export { Right } from 'fp-ts/lib/Either';
export { right } from 'fp-ts/lib/Either';
import type { These as TheseType } from 'fp-ts/lib/These';
export declare type These<E, A> = TheseType<E, A>;
export * as These_ from 'fp-ts/lib/These';
export { Both } from 'fp-ts/lib/These';
export { both } from 'fp-ts/lib/These';
export { IO } from 'fp-ts/lib/IO';
export * as IO_ from 'fp-ts/lib/IO';
export { IOEither } from 'fp-ts/lib/IOEither';
export * as IOEither_ from 'fp-ts/lib/IOEither';
export { Task } from 'fp-ts/lib/Task';
export * as Task_ from 'fp-ts/lib/Task';
export { TaskOption } from 'fp-ts/lib/TaskOption';
export * as TaskOption_ from 'fp-ts/lib/TaskOption';
export { TaskEither } from 'fp-ts/lib/TaskEither';
export * as TaskEither_ from 'fp-ts/lib/TaskEither';
export { TaskThese } from 'fp-ts/lib/TaskThese';
export * as TaskThese_ from 'fp-ts/lib/TaskThese';
export { Reader } from 'fp-ts/lib/Reader';
export * as Reader_ from 'fp-ts/lib/Reader';
export { ReaderEither } from 'fp-ts/lib/ReaderEither';
export * as ReaderEither_ from 'fp-ts/lib/ReaderEither';
export { ReaderTask } from 'fp-ts/lib/ReaderTask';
export * as ReaderTask_ from 'fp-ts/lib/ReaderTask';
export { ReaderTaskEither } from 'fp-ts/lib/ReaderTaskEither';
export * as ReaderTaskEither_ from 'fp-ts/lib/ReaderTaskEither';
export { Magma } from 'fp-ts/lib/Magma';
export * as Magma_ from 'fp-ts/lib/Magma';
export { Monoid } from 'fp-ts/lib/Monoid';
export * as Monoid_ from 'fp-ts/lib/Monoid';
export { Refinement } from 'fp-ts/lib/Refinement';
export * as Refinement_ from 'fp-ts/lib/Refinement';
export { Ord } from 'fp-ts/lib/Ord';
export * as Ord_ from 'fp-ts/lib/Ord';
export { Eq } from 'fp-ts/lib/Eq';
export * as Eq_ from 'fp-ts/lib/Eq';
export * as Apply_ from 'fp-ts/lib/Apply';
export * as Foldable_ from 'fp-ts/lib/Foldable';
export { Json } from 'fp-ts/lib/Json';
export * as Json_ from 'fp-ts/lib/Json';
export * as Console_ from 'fp-ts/lib/Console';
export * as Random_ from 'fp-ts/lib/Random';
